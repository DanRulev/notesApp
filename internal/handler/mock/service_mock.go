// Code generated by MockGen. DO NOT EDIT.
// Source: noteApp/internal/handler (interfaces: ServiceI)

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	dto "noteApp/internal/models/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockServiceI is a mock of ServiceI interface.
type MockServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIMockRecorder
}

// MockServiceIMockRecorder is the mock recorder for MockServiceI.
type MockServiceIMockRecorder struct {
	mock *MockServiceI
}

// NewMockServiceI creates a new mock instance.
func NewMockServiceI(ctrl *gomock.Controller) *MockServiceI {
	mock := &MockServiceI{ctrl: ctrl}
	mock.recorder = &MockServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceI) EXPECT() *MockServiceIMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockServiceI) CreateNote(arg0 context.Context, arg1 dto.NoteCreate) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockServiceIMockRecorder) CreateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockServiceI)(nil).CreateNote), arg0, arg1)
}

// DeleteNote mocks base method.
func (m *MockServiceI) DeleteNote(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockServiceIMockRecorder) DeleteNote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockServiceI)(nil).DeleteNote), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockServiceI) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockServiceIMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockServiceI)(nil).DeleteUser), arg0, arg1)
}

// Logout mocks base method.
func (m *MockServiceI) Logout(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockServiceIMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockServiceI)(nil).Logout), arg0, arg1)
}

// Note mocks base method.
func (m *MockServiceI) Note(arg0 context.Context, arg1, arg2 uuid.UUID) (dto.NoteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Note", arg0, arg1, arg2)
	ret0, _ := ret[0].(dto.NoteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Note indicates an expected call of Note.
func (mr *MockServiceIMockRecorder) Note(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Note", reflect.TypeOf((*MockServiceI)(nil).Note), arg0, arg1, arg2)
}

// Notes mocks base method.
func (m *MockServiceI) Notes(arg0 context.Context, arg1 uuid.UUID, arg2 dto.Paginated) (dto.PaginatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notes", arg0, arg1, arg2)
	ret0, _ := ret[0].(dto.PaginatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notes indicates an expected call of Notes.
func (mr *MockServiceIMockRecorder) Notes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notes", reflect.TypeOf((*MockServiceI)(nil).Notes), arg0, arg1, arg2)
}

// ParseToken mocks base method.
func (m *MockServiceI) ParseToken(arg0 context.Context, arg1 string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockServiceIMockRecorder) ParseToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockServiceI)(nil).ParseToken), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockServiceI) RefreshToken(arg0 context.Context, arg1 string) (dto.TokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(dto.TokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockServiceIMockRecorder) RefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockServiceI)(nil).RefreshToken), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockServiceI) SignIn(arg0 context.Context, arg1 dto.UserSignIn) (dto.TokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(dto.TokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockServiceIMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockServiceI)(nil).SignIn), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockServiceI) SignUp(arg0 context.Context, arg1 dto.UserCreate) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockServiceIMockRecorder) SignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockServiceI)(nil).SignUp), arg0, arg1)
}

// UpdateNote mocks base method.
func (m *MockServiceI) UpdateNote(arg0 context.Context, arg1 dto.NoteUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockServiceIMockRecorder) UpdateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockServiceI)(nil).UpdateNote), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockServiceI) UpdateUser(arg0 context.Context, arg1 dto.UserUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockServiceIMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockServiceI)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserPassword mocks base method.
func (m *MockServiceI) UpdateUserPassword(arg0 context.Context, arg1 dto.UserUpdPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockServiceIMockRecorder) UpdateUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockServiceI)(nil).UpdateUserPassword), arg0, arg1)
}

// UserByID mocks base method.
func (m *MockServiceI) UserByID(arg0 context.Context, arg1 uuid.UUID) (dto.UserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", arg0, arg1)
	ret0, _ := ret[0].(dto.UserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID.
func (mr *MockServiceIMockRecorder) UserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*MockServiceI)(nil).UserByID), arg0, arg1)
}
