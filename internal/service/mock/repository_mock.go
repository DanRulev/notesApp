// Code generated by MockGen. DO NOT EDIT.
// Source: noteApp/internal/service (interfaces: RepositoryI)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	domain "noteApp/internal/models/domain"
	dto "noteApp/internal/models/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockRepositoryI) CreateNote(arg0 context.Context, arg1 domain.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockRepositoryIMockRecorder) CreateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockRepositoryI)(nil).CreateNote), arg0, arg1)
}

// CreateToken mocks base method.
func (m *MockRepositoryI) CreateToken(arg0 context.Context, arg1 domain.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockRepositoryIMockRecorder) CreateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockRepositoryI)(nil).CreateToken), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockRepositoryI) CreateUser(arg0 context.Context, arg1 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryIMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryI)(nil).CreateUser), arg0, arg1)
}

// DeleteNote mocks base method.
func (m *MockRepositoryI) DeleteNote(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockRepositoryIMockRecorder) DeleteNote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockRepositoryI)(nil).DeleteNote), arg0, arg1, arg2)
}

// DeleteToken mocks base method.
func (m *MockRepositoryI) DeleteToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockRepositoryIMockRecorder) DeleteToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockRepositoryI)(nil).DeleteToken), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockRepositoryI) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryIMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepositoryI)(nil).DeleteUser), arg0, arg1)
}

// Note mocks base method.
func (m *MockRepositoryI) Note(arg0 context.Context, arg1, arg2 uuid.UUID) (domain.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Note", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Note indicates an expected call of Note.
func (mr *MockRepositoryIMockRecorder) Note(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Note", reflect.TypeOf((*MockRepositoryI)(nil).Note), arg0, arg1, arg2)
}

// Notes mocks base method.
func (m *MockRepositoryI) Notes(arg0 context.Context, arg1 uuid.UUID, arg2 dto.Paginated) ([]domain.Note, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Note)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Notes indicates an expected call of Notes.
func (mr *MockRepositoryIMockRecorder) Notes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notes", reflect.TypeOf((*MockRepositoryI)(nil).Notes), arg0, arg1, arg2)
}

// Token mocks base method.
func (m *MockRepositoryI) Token(arg0 context.Context, arg1 string) (domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", arg0, arg1)
	ret0, _ := ret[0].(domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockRepositoryIMockRecorder) Token(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockRepositoryI)(nil).Token), arg0, arg1)
}

// UpdateNote mocks base method.
func (m *MockRepositoryI) UpdateNote(arg0 context.Context, arg1 domain.NoteUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockRepositoryIMockRecorder) UpdateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockRepositoryI)(nil).UpdateNote), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockRepositoryI) UpdateUser(arg0 context.Context, arg1 domain.UserUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryIMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepositoryI)(nil).UpdateUser), arg0, arg1)
}

// UserByID mocks base method.
func (m *MockRepositoryI) UserByID(arg0 context.Context, arg1 uuid.UUID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID.
func (mr *MockRepositoryIMockRecorder) UserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*MockRepositoryI)(nil).UserByID), arg0, arg1)
}

// UserCredentials mocks base method.
func (m *MockRepositoryI) UserCredentials(arg0 context.Context, arg1 string) (uuid.UUID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCredentials", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCredentials indicates an expected call of UserCredentials.
func (mr *MockRepositoryIMockRecorder) UserCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCredentials", reflect.TypeOf((*MockRepositoryI)(nil).UserCredentials), arg0, arg1)
}
